{"version":3,"sources":["components/editable-item/index.js","components/editable-item/editable-item.js","components/tree-node/index.js","components/tree-node/tree-node.js","components/add-button/index.js","components/add-button/add-button.js","components/control-panel/index.js","components/control-panel/control-panel.js","components/text-view/index.js","components/text-view/text-view.js","components/tree/index.js","components/tree/tree.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["EditableItem","props","title","changeTitle","removeNode","addChild","react_default","a","createElement","className","onClick","onChange","e","target","value","placeholder","TreeNode","_ref","children","otherProps","Object","objectWithoutProperties","hasChildren","undefined","components_editable_item","map","nodeProps","id","others","assign","key","renderChildren","AddButton","ControlPanel","hasSaved","saveState","loadState","TextView","Tree","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nodes","initializedÐ¡opy","data","savedNodes","bind","assertThisInitialized","addRootElement","onTextChange","nodesToString","location","nodesCopy","i","length","_nodes$i","concat","_this2","newTitle","split","str","parseInt","changingNode","setState","newNode","toConsumableArray","_this3","join","_this4","newNodes","slice","index","newChildren","JSON","parse","stringify","simplify","_nodes$i2","_this$state","components_control_panel","components_tree_node","components_add_button","components_text_view","Component","DEFAULT_NODES","App","components_tree","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22cb262e.chunk.js","sourcesContent":["import EditableItem from \"./editable-item\";\r\nexport default EditableItem;","import React from \"react\";\r\nimport \"./editable-item.css\";\r\n\r\nconst EditableItem = (props) => {\r\n    const { title, changeTitle, removeNode, addChild } = props;\r\n\r\n    return (\r\n        <div className=\"EditableItem\">\r\n        \r\n            <button\r\n               className=\"EditableItem-Button EditableItem-Button_add\"\r\n               onClick={addChild}>\r\n                 +\r\n            </button>\r\n\r\n            <button\r\n              className=\"EditableItem-Button EditableItem-Button_remove\" \r\n              onClick={removeNode}>\r\n                x\r\n            </button>\r\n            \r\n            <input\r\n              className=\"EditableItem-Text\"\r\n              onChange={(e) => { changeTitle(e.target.value) }}\r\n              value={title}\r\n              placeholder=\"New Item\"\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditableItem;","import TreeNode from \"./tree-node\";\r\nexport default TreeNode;","import React from \"react\";\r\nimport EditableItem from \"../editable-item\";\r\nimport \"./tree-node.css\";\r\n\r\nconst TreeNode = ({ children, ...otherProps }) => {\r\n    const hasChildren = children !== undefined;\r\n\r\n    const renderChildren = (children) => {\r\n        return (\r\n            <ul>\r\n                { children.map((nodeProps) => {\r\n                    const { id, ...others } = nodeProps;\r\n                    return (\r\n                        <TreeNode \r\n                          key={id}\r\n                          {...others}\r\n                        />\r\n                    );\r\n                }) }\r\n            </ul>\r\n        );\r\n    }        \r\n\r\n    return (\r\n        <li>\r\n            <div className=\"TreeNode\">\r\n                <EditableItem {...otherProps} />\r\n            </div>\r\n            {hasChildren && renderChildren(children)}\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default TreeNode;","import AddButton from \"./add-button\";\r\nexport default AddButton;","import React from \"react\";\r\nimport \"./add-button.css\";\r\n\r\nconst AddButton = ( {onClick} ) => {\r\n    return (\r\n      <div className=\"AddButton\">\r\n          <button \r\n            className=\"AddButton-Inner\" \r\n            onClick={onClick}\r\n            value>\r\n            +\r\n          </button>\r\n      </div>\r\n    );   \r\n}\r\n\r\nexport default AddButton;","import ControlPanel from \"./control-panel\";\r\nexport default ControlPanel;","import React from \"react\";\r\nimport \"./control-panel.css\";\r\n\r\nconst ControlPanel = (props) => {\r\n    const { hasSaved, saveState, loadState } = props;\r\n    const renderLoadButton = () => {\r\n        if (hasSaved) {\r\n            return (\r\n                <button className=\"ControlPanel-Button ControlPanel-Button_load\" \r\n                  onClick={loadState}>\r\n                    Load\r\n                </button>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"ControlPanel\">\r\n            <button className=\"ControlPanel-Button ControlPanel-Button_save\" \r\n              onClick={saveState}>\r\n                Save\r\n            </button>\r\n            { renderLoadButton() }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ControlPanel;","import TextView from \"./text-view\";\r\nexport default TextView;","import React from \"react\";\r\nimport \"./text-view.css\";\r\n\r\nconst TextView = ( { onChange, value } ) => {\r\n    return (\r\n        <div className=\"TextView\">\r\n            <textarea \r\n              className=\"TextView-Area\"\r\n              value={value}\r\n              onChange={onChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextView;","import Tree from \"./tree\";\r\nexport default Tree;","import React, { Component } from \"react\";\r\nimport TreeNode from \"../tree-node\";\r\nimport AddButton from \"../add-button\";\r\nimport ControlPanel from \"../control-panel\";\r\nimport TextView from \"../text-view\";\r\nimport \"./tree.css\";\r\n\r\n\r\nclass Tree extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: this.initializedÐ¡opy(this.props.data),\r\n            savedNodes: [],\r\n        }\r\n        this.changeTitle = this.changeTitle.bind(this);\r\n        this.addRootElement = this.addRootElement.bind(this);\r\n        this.addChild = this.addChild.bind(this);\r\n        this.removeNode = this.removeNode.bind(this);\r\n        this.saveState = this.saveState.bind(this);\r\n        this.loadState = this.loadState.bind(this);\r\n        this.onTextChange = this.onTextChange.bind(this);\r\n        this.nodesToString = this.nodesToString.bind(this);\r\n    }\r\n\r\n    initializedÐ¡opy(nodes, location) {\r\n        const nodesCopy = [];\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const { children, title } = nodes[i];\r\n            const hasChildren = children !== undefined;\r\n            const id = location ? `${location}.${i + 1}` : `${i + 1}`;\r\n            nodesCopy[i] = { \r\n                    children: hasChildren ? this.initializedÐ¡opy(children, id) : undefined,\r\n                    changeTitle: this.changeTitle(id),\r\n                    removeNode: this.removeNode(id),\r\n                    addChild: this.addChild(id),\r\n                    id,\r\n                    title,\r\n            };\r\n        }\r\n        return nodesCopy;\r\n    }\r\n\r\n    changeTitle(id) {\r\n        return (newTitle) => {\r\n            id = id.split(\".\").map((str) => parseInt(str));\r\n            const nodes = this.initializedÐ¡opy(this.state.nodes);\r\n            let changingNode = nodes[id[0] - 1];\r\n\r\n            if (id.length > 1) {\r\n                for (let i = 1; i < id.length; i++) {\r\n                    changingNode = changingNode.children[id[i] - 1];\r\n                }\r\n            }\r\n\r\n            changingNode.title = newTitle;\r\n            this.setState({ nodes });\r\n        };\r\n    }\r\n\r\n    addRootElement() {\r\n        const id = this.state.nodes.length ? `${this.state.nodes.length + 1}` : \"1\";\r\n        const newNode = { \r\n            children: undefined,\r\n            changeTitle: this.changeTitle(id),\r\n            removeNode: this.removeNode(id),\r\n            addChild: this.addChild(id),\r\n            id,\r\n            title: \"\",\r\n        };\r\n        \r\n        const nodes = [...this.state.nodes, newNode];\r\n        this.setState({ nodes });\r\n    }\r\n\r\n    addChild(id) {\r\n        return () => {\r\n            id = id.split(\".\").map((str) => parseInt(str));\r\n            const nodes = this.initializedÐ¡opy(this.state.nodes);\r\n            let changingNode = nodes[id[0] - 1];\r\n\r\n            if (id.length > 1) {\r\n                for (let i = 1; i < id.length; i++) {\r\n                    changingNode = changingNode.children[id[i] - 1];\r\n                }\r\n            }\r\n\r\n            if (changingNode.children === undefined) {\r\n                changingNode.children = [];\r\n            }\r\n            \r\n            id = `${id.join(\".\")}.${changingNode.children.length + 1}`;\r\n\r\n            changingNode.children = [\r\n                ...changingNode.children,\r\n                { \r\n                    children: undefined,\r\n                    changeTitle: this.changeTitle(id),\r\n                    removeNode: this.removeNode(id),\r\n                    addChild: this.addChild(id),\r\n                    id,\r\n                    title: \"\",\r\n                }];\r\n\r\n            this.setState({ nodes });\r\n        }\r\n    }\r\n\r\n    removeNode(id) {\r\n        return () => {\r\n            id = id.split(\".\").map((str) => parseInt(str));\r\n            const nodes = this.initializedÐ¡opy(this.state.nodes);\r\n\r\n            if (id.length === 1) {\r\n                const newNodes = [\r\n                    ...nodes.slice(0, [id[0] - 1]),\r\n                    ...nodes.slice(id[0])\r\n                ];\r\n\r\n                this.setState( { nodes: this.initializedÐ¡opy(newNodes) } );\r\n\r\n            } else {\r\n                let changingNode = nodes[id[0] - 1];\r\n                \r\n                for (let i = 2; i < id.length; i++) {\r\n                    changingNode = changingNode.children[id[i - 1] - 1];\r\n                }\r\n\r\n                const index = id[id.length - 1] - 1;\r\n\r\n                const newChildren = [\r\n                    ...changingNode.children.slice(0, index),\r\n                    ...changingNode.children.slice(index + 1),\r\n                ];\r\n                changingNode.children = newChildren;\r\n\r\n                this.setState({ nodes: this.initializedÐ¡opy(nodes) });\r\n            }\r\n        }\r\n    }\r\n\r\n    saveState() {\r\n        this.setState({ savedNodes: this.initializedÐ¡opy(this.state.nodes) });\r\n    }\r\n\r\n    loadState() {\r\n        this.setState({ nodes: this.initializedÐ¡opy(this.state.savedNodes) });\r\n    }\r\n\r\n    onTextChange(e) { \r\n        this.setState({ nodes: this.initializedÐ¡opy(JSON.parse(e.target.value)) });\r\n    }\r\n\r\n    nodesToString() {\r\n        return JSON.stringify(this.simplify(this.state.nodes), undefined, 2);\r\n    }\r\n\r\n    simplify(nodes) {\r\n        const nodesCopy = [];\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const { children, title } = nodes[i];\r\n            const hasChildren = children !== undefined && children.length > 0;\r\n            nodesCopy[i] = { \r\n                title,\r\n                children: hasChildren ? this.simplify(children) : undefined,\r\n            };\r\n        }\r\n        return nodesCopy;\r\n    }\r\n\r\n    render() {\r\n        const { nodes, savedNodes } = this.state;\r\n        const { addRootElement, saveState, \r\n                loadState, onTextChange, nodesToString} = this;\r\n        const hasSaved = savedNodes.length !== 0;\r\n\r\n        return (\r\n            <div className=\"Tree\">\r\n            \r\n                <div className=\"Tree-LeftSide\">\r\n                <ControlPanel {...{ hasSaved, saveState, loadState }} />\r\n                  <ul className=\"Nodes\">\r\n                    { nodes.map((nodeProps) => {\r\n                      const { id, ...others } = nodeProps;\r\n                      return (\r\n                        <TreeNode \r\n                          key={id}\r\n                          {...others}\r\n                        />\r\n                      );}) }\r\n                  </ul>\r\n                  <AddButton onClick={addRootElement} />\r\n               </div>\r\n\r\n               <div className=\"Tree-RightSide\">\r\n                   <TextView\r\n                     value={nodesToString()}\r\n                     onChange={onTextChange}\r\n                   />\r\n               </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tree;","export const DEFAULT_NODES = [\r\n    {\r\n        \"title\": \"Tea\",\r\n        \"children\": [\r\n            {\r\n                \"title\": \"Black\",\r\n                \"children\": [\r\n                    {\r\n                        \"title\": \"Assam\"\r\n                    },\r\n                    {\r\n                        \"title\": \"Earl Grey\"\r\n                    },\r\n                    {\r\n                        \"title\": \"Lapsang Souchong\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"title\": \"Green\",\r\n                \"children\": [\r\n                    {\r\n                        \"title\": \"Japanese Sencha\"\r\n                    },\r\n                    {\r\n                        \"title\": \"Jasmine Pearls\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"title\": \"Coffee\",\r\n        \"children\": [\r\n            {\r\n                \"title\": \"Espresso\"\r\n            },\r\n            {\r\n                \"title\": \"Mochaccino\"\r\n            },\r\n            {\r\n                \"title\": \"Flat White\"\r\n            },\r\n            {\r\n                \"title\": \"Iced Latte\",\r\n                \"children\": [\r\n                    {\r\n                        \"title\": \"Vanilla\"\r\n                    },\r\n                    {\r\n                        \"title\": \"Gingerbread\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"title\": \"Milk\"\r\n    }\r\n];","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Tree from \"./components/tree\";\nimport { DEFAULT_NODES } from \"./constants\";\n\nclass App extends Component {\n\n    render() {      \n    return (\n      <Tree data={DEFAULT_NODES}/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}